{#
/**
 * @file
 * Default theme implementation to display a location.
 *
 * Available variables:
 * - ss_location: The location entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - ss_location.hasField('field_example') returns TRUE if the location bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 * - label: The title of the location.
 * - content: All location items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The location author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this location.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current location.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - ss_location: The current template type (also known as a "theming hook").
 *   - ss_location--type-[type]: The current location type. For example, if the location is an
 *     "Article" it would result in "ss_location--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - ss_location--view-mode-[view_mode]: The View Mode of the location; for example, a
 *     teaser would result in: "ss_location--view-mode-teaser", and
 *     full: "ss_location--view-mode-full".
 *   The following are controlled through the location publishing options.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   location cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_ss_location()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'location',
    'location--type-' ~ ss_location.bundle|clean_class,
    view_mode ? 'location--view-mode-' ~ view_mode|clean_class,
  ]
%}

<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes.addClass('location__title') }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  <div{{ content_attributes.addClass('location__content') }}>
    {{ content }}
  </div>

</article>
